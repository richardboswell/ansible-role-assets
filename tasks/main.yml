#
#  Copyright 2015 VMware, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

- name: create downloads directory
  file:
    dest: "{{ downloads_dir }}"
    state: directory
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0755

- name: get depot file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_depot_zip }}"
  when: download_files
  register: depot
  tags:
    - depot

- name: pull depot files for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_depot_zip }}"
    url: "{{ chaperone_depot_zip_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not depot.stat.exists or (depot.stat.md5 != "{{ chaperone_depot_zip_md5 }}"))
  tags:
    - depot

- name: get OVFTool zip file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_ovftool_zip }}"
  register: ovftool
  when: download_files
  tags:
    - ovftool

- name: pull OVFTool for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_ovftool_zip }}"
    url: "{{ chaperone_ovftool_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not ovftool.stat.exists or (ovftool.stat.md5 != "{{ chaperone_ovftool_md5 }}"))
  tags:
    - ofvtool

- name: get esx hypervisor iso file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_esxi_iso }}"
  register: esxiiso
  tags:
    - esxi

- name: pull esxi iso for future downloads (may take many minutes)
  get_url:
    dest: "{{ downloads_dir }}/{{ chaperone_esxi_iso }}"
    url: "{{ chaperone_esxi_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not esxiiso.stat.exists or (esxiiso.stat.md5 != "{{ chaperone_esxi_md5 }}"))
  tags:
    - esxi

- name: get vCenter Appliance file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_vcsa_iso }}"
  register: vcsaiso
  when: download_files
  tags:
    - vcsa

- name: pull vCenter Appliance ISO for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_vcsa_iso }}"
    url: "{{ chaperone_vcsa_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not vcsaiso.stat.exists or (vcsaiso.stat.md5 != "{{ chaperone_vcsa_md5 }}"))
  tags:
    - vcsa

- name: get NSX OVA stats
  stat: path="{{ downloads_dir }}/{{ chaperone_nsx_ova }}"
  register: nsxova
  when: download_files
  tags:
    - nsx

- name: pull NSX OVA for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_nsx_ova }}"
    url: "{{ chaperone_nsx_ova_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not nsxova.stat.exists or (nsxova.stat.md5 != "{{ chaperone_nsx_ova_md5 }}"))
  tags:
    - nsx

- name: get vROps OVA file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_vrops_ova }}"
  register: vropsova
  when: download_files
  tags:
    - vrops

- name: pull vROps OVA for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_vrops_ova }}"
    url: "{{ chaperone_vrops_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not vropsova.stat.exists or (vropsova.stat.md5 != "{{ chaperone_vrops_md5 }}"))
  tags:
    - vrops

- name: get vRLI OVA file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_vrli_ova }}"
  register: vrliova
  when: download_files
  tags:
    - vrli

- name: pull vRLI OVA for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_vrli_ova }}"
    url: "{{ chaperone_vrli_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not vrliova.stat.exists or (vrliova.stat.md5 != "{{ chaperone_vrli_md5 }}"))
  tags:
    - vrli

- name: get vRB OVA file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_vrb_ova }}"
  register: vrbova
  when: download_files
  tags:
    - vrb

- name: pull vRB OVA for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_vrb_ova }}"
    url: "{{ chaperone_vrb_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not vrbova.stat.exists or (vrbova.stat.md5 != "{{ chaperone_vrb_md5 }}"))
  tags:
    - vrb

- name: get vRA (Linux) Appliance OVA file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_vra_ova }}"
  register: vraova
  when: download_files
  tags:
    - vra

- name: pull vRA (Linux) Appliance OVA for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_vra_ova }}"
    url: "{{ chaperone_vra_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not vraova.stat.exists or (vraova.stat.md5 != "{{ chaperone_vra_md5 }}"))
  tags:
    - vra

- name: get VIO OVA file stats
  stat: path="{{ downloads_dir }}/{{ chaperone_vio_ova }}"
  register: vioova
  when: download_files
  tags:
    - vio

- name: pull VIO OVA for future downloads (may take many minutes)
  get_url:
    force: yes
    dest: "{{ downloads_dir }}/{{ chaperone_vio_ova }}"
    url: "{{ chaperone_vio_ova_url }}"
    timeout: "{{ downloads_timeout }}"
  when: download_files and (not vioova.stat.exists or (vioova.stat.md5 != "{{ chaperone_vio_ova_md5 }}"))
  tags:
    - vio
